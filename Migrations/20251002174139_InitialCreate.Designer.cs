// <auto-generated />
using System;
using FacilityManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FacilityManagement.Migrations
{
    [DbContext(typeof(FacilityManagementContext))]
    [Migration("20251002174139_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("FacilityManagement.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("FacilityManagement.Models.StorageUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("FacilityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MonthlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OccupantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("OccupiedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("SizeSquareMeters")
                        .HasColumnType("REAL");

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OccupantId");

                    b.HasIndex("FacilityId", "UnitNumber")
                        .IsUnique();

                    b.ToTable("StorageUnits");
                });

            modelBuilder.Entity("FacilityManagement.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FacilityManagement.Models.Facility", b =>
                {
                    b.HasOne("FacilityManagement.Models.User", "Owner")
                        .WithMany("OwnedFacilities")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FacilityManagement.Models.StorageUnit", b =>
                {
                    b.HasOne("FacilityManagement.Models.Facility", "Facility")
                        .WithMany("StorageUnits")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacilityManagement.Models.User", "Occupant")
                        .WithMany("OccupiedUnits")
                        .HasForeignKey("OccupantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Facility");

                    b.Navigation("Occupant");
                });

            modelBuilder.Entity("FacilityManagement.Models.Facility", b =>
                {
                    b.Navigation("StorageUnits");
                });

            modelBuilder.Entity("FacilityManagement.Models.User", b =>
                {
                    b.Navigation("OccupiedUnits");

                    b.Navigation("OwnedFacilities");
                });
#pragma warning restore 612, 618
        }
    }
}
